## TASK 5
install.packages("prob")
library(prob)
dr<- sample(1:6, size = 3, replace = T)
S <-replicate(10^5, sum(dr))
head(S, 15)
## Teorinis skirstinys
St <- rolldie(3, nsides = 6, makespace = T)
St <- addrv(St, sum = X1 + X2 + X3)
teor<- marginal(distr, vars="sum")
teor
cbind(as.data.frame(table(S)/n), S_teor)
plot(table(S)/n, xlab="Suma", ylab="Tikimybė")
points(S_teor, col=2)
##Tankis ir santykinis daznis
plot(table(allsum)/1000, xlab="Sum", ylab="Prob")
lines(theor, col=2)
## Vidurkis ir dispersija
average <- sum(teor$probs * teor$sum)
average
dis <- sum((teor$probs * (teor$sum-average)) * (teor$probs * (teor$sum-average)))
dis
plot(cumsum(S)/1:10^5, type="l", xlab="10^5", ylab = "S / 10^5", main="Vidurkio artėjimas į teorinį")
abline(h=average, col=2)
a=S*0
for(i in 1:10000){
a[i]=var(S[1:i])
}
plot(a[1:10000], type="l", xlab="10^5", ylab="dis", main="Dispersijos artėjimas į teorinę")
abline(h=dis, col=2)
## Sources
https://cran.r-project.org/web/packages/IPSUR/vignettes/IPSUR.pdf
http://stackoverflow.com/questions/14820203/simulating-rolling-two-dice
http://ditraglia.com/Econ103Public/Rtutorials/Rtutorial4.html
https://cran.r-project.org/web/packages/dice/dice.pdf
https://cran.r-project.org/web/packages/prob/vignettes/prob.pdf
Emilija Rudytė
Simona Gritytė, Orinta Jautakaitė, Sandra Kozlovskaja, Agnė Zavackaitė
## TASK 5
library(prob)
dr<- sample(1:6, size = 3, replace = T)
S <-replicate(10^5, sum(dr))
head(S, 15)
## Teorinis skirstinys
St <- rolldie(3, nsides = 6, makespace = T)
St <- addrv(St, sum = X1 + X2 + X3)
teor<- marginal(distr, vars="sum")
teor
cbind(as.data.frame(table(S)/n), S_teor)
plot(table(S)/n, xlab="Suma", ylab="Tikimybė")
points(S_teor, col=2)
##Tankis ir santykinis daznis
plot(table(allsum)/1000, xlab="Sum", ylab="Prob")
lines(theor, col=2)
## Vidurkis ir dispersija
average <- sum(teor$probs * teor$sum)
average
dis <- sum((teor$probs * (teor$sum-average)) * (teor$probs * (teor$sum-average)))
dis
plot(cumsum(S)/1:10^5, type="l", xlab="10^5", ylab = "S / 10^5", main="Vidurkio artėjimas į teorinį")
abline(h=average, col=2)
a=S*0
for(i in 1:10000){
a[i]=var(S[1:i])
}
plot(a[1:10000], type="l", xlab="10^5", ylab="dis", main="Dispersijos artėjimas į teorinę")
abline(h=dis, col=2)
## Sources
https://cran.r-project.org/web/packages/IPSUR/vignettes/IPSUR.pdf
http://stackoverflow.com/questions/14820203/simulating-rolling-two-dice
http://ditraglia.com/Econ103Public/Rtutorials/Rtutorial4.html
https://cran.r-project.org/web/packages/dice/dice.pdf
https://cran.r-project.org/web/packages/prob/vignettes/prob.pdf
Emilija Rudytė
Simona Gritytė, Orinta Jautakaitė, Sandra Kozlovskaja, Agnė Zavackaitė
## TASK 5
library(prob)
dr<- sample(1:6, size = 3, replace = T)
S <-replicate(10^5, sum(dr))
head(S, 15)
## Teorinis skirstinys
St <- rolldie(3, nsides = 6, makespace = T)
St <- addrv(St, sum = X1 + X2 + X3)
teor<- marginal(distr, vars="sum")
teor
cbind(as.data.frame(table(S)/n), S_teor)
plot(table(S)/n, xlab="Suma", ylab="Tikimybė")
points(S_teor, col=2)
##Tankis ir santykinis daznis
plot(table(allsum)/1000, xlab="Sum", ylab="Prob")
lines(theor, col=2)
## Vidurkis ir dispersija
average <- sum(teor$probs * teor$sum)
average
dis <- sum((teor$probs * (teor$sum-average)) * (teor$probs * (teor$sum-average)))
dis
plot(cumsum(S)/1:10^5, type="l", xlab="10^5", ylab = "S / 10^5", main="Vidurkio artėjimas į teorinį")
abline(h=average, col=2)
a=S*0
for(i in 1:10000){
a[i]=var(S[1:i])
}
plot(a[1:10000], type="l", xlab="10^5", ylab="dis", main="Dispersijos artėjimas į teorinę")
abline(h=dis, col=2)
## Sources
https://cran.r-project.org/web/packages/IPSUR/vignettes/IPSUR.pdf
http://stackoverflow.com/questions/14820203/simulating-rolling-two-dice
http://ditraglia.com/Econ103Public/Rtutorials/Rtutorial4.html
https://cran.r-project.org/web/packages/dice/dice.pdf
https://cran.r-project.org/web/packages/prob/vignettes/prob.pdf
Emilija Rudytė
Simona Gritytė, Orinta Jautakaitė, Sandra Kozlovskaja, Agnė Zavackaitė
library(prob)
dr<- sample(1:6, size = 3, replace = T)
S <-replicate(10^5, sum(dr))
head(S, 15)
St <- rolldie(3, nsides = 6, makespace = T)
St <- addrv(St, sum = X1 + X2 + X3)
teor <- marginal(St, vars="sum")
teor
cbind(as.data.frame(table(S)/10^5), S_teor)
plot(table(S)/10^5, xlab="Suma", ylab="Tikimybė")
points(S_teor, col=2)
cbind(as.data.frame(table(S)/10^5), teor)
plot(table(S)/10^5, xlab="Suma", ylab="Tikimybė")
points(teor, col=2)
average <- sum(teor$probs * teor$sum)
average
dis <- sum((teor$probs * (teor$sum-average)) * (teor$probs * (teor$sum-average)))
dis
plot(cumsum(S)/1:10^5, type="l", xlab="10^5", ylab = "S / 10^5", main="Vidurkio artėjimas į teorinį")
abline(h=average, col=2)
a=S*0
for(i in 1:10000){
a[i]=var(S[1:i])
}
plot(a[1:10000], type="l", xlab="10^5", ylab="dis", main="Dispersijos artėjimas į teorinę")
abline(h=dis, col=2)
n <- 10^5
S <- replicate(n, sum(sample(1:6, 3, replace = TRUE)))
head(S, 15)
St <- rolldie(3, nsides = 6, makespace = TRUE)
St <- addrv(St, sum = X1 + X2 + X3)
S_teor <- marginal(St, vars="sum")
S_teor
library(prob)
St <- rolldie(3, nsides = 6, makespace = TRUE)
St <- addrv(St, sum = X1 + X2 + X3)
S_teor <- marginal(St, vars="sum")
S_teor
cbind(as.data.frame(table(S)/n), S_teor)
plot(table(S)/n, xlab="Suma", ylab="Tikimybė")
points(S_teor, col=2)
library(prob)
n <- 10^5
dr <- sum(sample(1:6, 3, replace = TRUE))
S <- replicate(n,dr)
head(S, 15)
St <- rolldie(3, nsides = 6, makespace = TRUE)
St <- addrv(St, sum = X1 + X2 + X3)
teor <- marginal(St, vars="sum")
teor
cbind(as.data.frame(table(S)/n), teor)
plot(table(S)/n, xlab="Suma", ylab="Tikimybė")
points(teor, col=2)
St <- rolldie(3, nsides = 6, makespace = TRUE)
St <- addrv(St, sum = X1 + X2 + X3)
teor <- marginal(St, vars="sum")
teor
cbind(as.data.frame(table(S)/n), teor)
plot(table(S)/n, xlab="Suma", ylab="Tikimybė")
points(teor, col=2)
cbind(as.data.frame(table(S)/n), teor)
plot(table(S)/n, xlab="Suma", ylab="Tikimybė")
points(teor, col=2)
n <- 10^5
dr <- sum(sample(1:6, 3, replace = TRUE))
S <- replicate(n,dr)
head(S, 15)
Aukščiau pateikta 15 pirmų atsitiktinio dydžio S realizacijų.
1.	Raskite teorinį S skirstinį, t.y. kiekvienai galimai S reikšmei raskite pasirodymo tikimybę.
St <- rolldie(3, nsides = 6, makespace = TRUE)
St <- addrv(St, sum = X1 + X2 + X3)
teor <- marginal(St, vars="sum")
teor
Šio kodo pavyzdį radome knygoje Kerns, G. Jay. 2011. “Introduction to Probability and Statistics Using R.”.
1.	Iš sugeneruotos imties, padarykite santykinių dažnių lentelę ir gautas reikšmes palyginkite su teorinėmis tikimybėmis. Palyginimui pateikite grafiką ir lentelę, taip, kad būtų patogu lyginti gautus rezultatus.
cbind(as.data.frame(table(S)/n), teor)
Teorinės tikimybės pateiktos dešinėje.
plot(table(S)/n, xlab="Suma", ylab="Tikimybė")
points(teor, col=2)
Raudoni taškai žymi teorines tikimybes.
1.	Suskaičiuokite teorinį S vidurkį ir dispersiją. Padarykite grafikus, kuriuose matytųsi, kaip didėjant n minėtų charakteristikų įvertiniai artėja į teorines reikšmes.
Teorinis vidurkis:
average <- sum(teor$probs * teor$sum)
average
Teorinė dispersija:
disp <- sum(teor$probs * (teor$sum-average)^2)
disp
plot(cumsum(S)/1:n, type="l", xlab="n", ylab = "S / n", main="Vidurkio artėjimas į teorinį")
abline(h=average, col=2)
a=S*0
for(i in 1:10000){
a[i]=var(S[1:i])
}
plot(a[1:10000], type="l", xlab="n", ylab="varS", main="Dispersijos artėjimas į teorinę")
abline(h=disp, col=2)
library(prob)
n <- 10^5
S <- replicate(n,sum(sample(1:6, 3, replace = TRUE)))
head(S, 15)
St <- rolldie(3, nsides = 6, makespace = TRUE)
St <- addrv(St, sum = X1 + X2 + X3)
teor <- marginal(St, vars="sum")
teor
cbind(as.data.frame(table(S)/n), teor)
plot(table(S)/n, xlab="Suma", ylab="Tikimybė")
points(teor, col=2)
average <- sum(teor$probs * teor$sum)
average
disp <- sum(teor$probs * (teor$sum-average)^2)
disp
plot(cumsum(S)/1:n, type="l", xlab="n", ylab = "S / n", main="Vidurkio artėjimas į teorinį")
abline(h=average, col=2)
a=S*0
for(i in 1:10000){
a[i]=var(S[1:i])
}
plot(a[1:10000], type="l", xlab="n", ylab="varS", main="Dispersijos artėjimas į teorinę")
abline(h=disp, col=2)
require(RCurl)
duomenys <-read.csv(text=getURL("https://raw.githubusercontent.com/1vbutkus/Econometrics1/master/task6/R_programing_swirlResults.csv"))
duomenys
open(duomenys)
duomenys <-read.csv(text=getURL("https://raw.githubusercontent.com/1vbutkus/Econometrics1/master/task6/R_programing_swirlResults.csv"))
read.csv()
open('duomenys')
open("duomenys")
attach(duomenys)
duomenys[1:10, ]
duomenys <-read.csv(text=getURL("https://raw.githubusercontent.com/1vbutkus/Econometrics1/master/task6/R_programing_swirlResults.csv"))
duomenys <- read.table(' https://raw.githubusercontent.com/1vbutkus/Econometrics1/master/task6/R_programing_swirlResults.csv')
duomenys <-read.csv(text=getURL("https://raw.githubusercontent.com/1vbutkus/Econometrics1/master/task6/R_programing_swirlResults.csv"))
require(RCurl)
duomenys <- read.table(' https://raw.githubusercontent.com/1vbutkus/Econometrics1/master/task6/R_programing_swirlResults.csv')
duomenys <-read.csv(text=getURL("https://raw.githubusercontent.com/1vbutkus/Econometrics1/master/task6/R_programing_swirlResults.csv"))
View(duomenys)
sysUser <- duomenys[ ,4]
View(sysUser)
View(duomenys)
sysUser <- duomenys[ ,2]
lesson <- duomenys[ ,9]
skip <- duomenys[ ,14]
View(lesson)
View(sysUser, lesson, skip)
require (RCurl)
data <- read.csv(text=getURL("https://raw.githubusercontent.com/1vbutkus/Econometrics1/master/task6/R_programing_swirlResults.csv"), stringsAsFactors=FALSE)
view(data)
view(data)
data
View('data')
View(data)
?class
class(data)
pavadinimai <- colnames(data)
pavadinimai
class(data$X)
class(data$name)
class(data$takeTime)
class(data$sysUser)
class(data$sysName)
class(data$sysTime)
class(data$user)
class(data$course_name)
class(data$lesson_name)
class(data$question_number)
class(data$correct)
class(data$attempt)
class(data$datetime)
class(data$skipped)
data$sysTime <- strptime(data$sysTime,"%Y-%m-%d %H:%M:%S")
data$datetime <- strptime(data$datetime,"%Y-%m-%d %H:%M:%S")
table(data$user)
new.data <- data[( data$user!="1vbutkus" & data$user!="aaa" & data$user!="testas" ),]
table(new.data$user)
sum(duplicated(new.data))
n <- length(new.data[(new.data$user=="j" | new.data$user=="ju" | new.data$user=="juste" | new.data$user=="Juste" ),("user")])
new.data[(new.data$user=="j" | new.data$user=="ju" | new.data$user=="juste" | new.data$user=="Juste" ),("user")]= c(replicate(n,"justinasasnauskaite"))
m <- length(new.data[(new.data$user=="gyse" | new.data$user=="gyse3054" ),("user")])
new.data[(new.data$user=="gyse" | new.data$user=="gyse3054" ),("user")]=c(replicate(m,"gyse3054"))
l <- length(new.data[(new.data$user=="rokasalek" | new.data$user=="rokasaleks" ),("user")])
new.data[(new.data$user=="rokasalek" | new.data$user=="rokasaleks" ),("user")]=c(replicate(l,"rokasaleks"))
skipping <- new.data[(new.data$skipped==TRUE),]
table(skipping$user)
o.skipping <- new.data[(new.data$user!="Dariukxas" & new.data$user!="Domante Bulovaite" & new.data$user!="gyse3054" & new.data$user!="Greta" & new.data$user!="gretajes" & new.data$user!="justinasasnauskaite" & new.data$user!="Karolina" & new.data$user!="kestous" & new.data$user!="ogadova" & new.data$user!="ojautakaite" & new.data$user != "Raigardas" & new.data$user!="rokasaleks" & new.data$user!="SandraKozlovskaja" & new.data$user!="simonalevickaite" & new.data$user!="sindeivydas"),]
no.skipping <- new.data[(new.data$user!="Dariukxas" & new.data$user!="Domante Bulovaite" & new.data$user!="gyse3054" & new.data$user!="Greta" & new.data$user!="gretajes" & new.data$user!="justinasasnauskaite" & new.data$user!="Karolina" & new.data$user!="kestous" & new.data$user!="ogadova" & new.data$user!="ojautakaite" & new.data$user != "Raigardas" & new.data$user!="rokasaleks" & new.data$user!="SandraKozlovskaja" & new.data$user!="simonalevickaite" & new.data$user!="sindeivydas"),]
table(no.skipping$user)
nothing.skipping <- new.data[(new.data$skipped==FALSE),]
table(nothing.skipping$user)
skipping <- new.data[(new.data$skipped==TRUE),]
table(skipping$user)
table(no.skipping$user)
min.skip.data <- new.data[ (new.data$user=="aipe00" | new.data $user=="edba2903" | new.data $user=="emru3000" | new.data $user=="MildaPie" | new.data $user=="simona1234" | new.data $user=="zagnyte"),]
table(min.skip.data$user)
name.less.data <- data.frame(min.skip.data$user, min.skip.data$lesson_name)
table(name.less.data)
name.less.dublic <- name.less.data[!duplicated(name.less.data),
]
name.less.dublic
table(name.less.dublic[,1])
skip.new.data <- new.data[!(new.data$user=="aipe00" | new.data$user=="emru3000" | new.data$user=="simona1234" | new.data$user=="zagnyte"),]
skip.new.data2 <- skip.new.data[!duplicate(skip.new.data), ]
skip.new.data2 <- skip.new.data[!duplicated(skip.new.data), ]
table(skip.new.data2[,1])
skip.new.data1 <- data.frame(skip.new.data$user, skip.new.data$lesson_name)
skip.new.data2 <- skip.new.data1[!duplicated(skip.new.data1), ]
table(skip.new.data2[,1])
table(skip.new.data[skip.new.data$skipped==TRUE,7])
skipping <- new.data[(new.data$skipped==TRUE),]
table(skipping$user)
